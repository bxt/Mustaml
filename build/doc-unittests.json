{
"desc":"Mustaml is a html template language that enforces \"logic-less\" templates as known from {{ mustache }} but using pythonish indentation like HAML to build html-tags. Here are some Examples of Mustaml usage. ",
"unittests":[
{
"title":"Creating HTML-tags quickly",
"desc":"You can create tags with the %tag styntax. Nesting is done via indentation. Tags are automatically closed. ",
"testname":"BasicIndented",
"data":{},
"mustaml":"%html\n  %head\n    %title Yippiyeah!\n  %body\n   %p\n     Everything closing automatically. ",
"html":"<html><head><title>Yippiyeah!</title></head><body><p>Everything closing automatically. </p></body></html>"
},
{
"title":"Creating HTML-tags even quicker",
"desc":"You can append child nodes directly to save lines:",
"testname":"BasicNonIndented",
"data":{},
"mustaml":"%html\n  %head %title Yippiyeah!\n  %body %p Everything closing automatically. ",
"html":"<html><head><title>Yippiyeah!</title></head><body><p>Everything closing automatically. </p></body></html>"
},
{
"title":"Mixing nesting and appending",
"desc":"For every node you append, we're nesting all child nodes that level deeper. This happens when mixing appending and nesting: ",
"testname":"BasicIndentedAndNonIndented",
"data":{},
"mustaml":"%p %span\n  %b Wow. \n  Really. ",
"html":"<p><span><b>Wow. </b>Really. </span></p>"
},
{
"title":"Adding classes and ids in CSS-syntax",
"desc":"One of the Key features is quickly adding the common class and id attributes, with a syntax well known from CSS. ",
"testname":"BasicClassAndId",
"data":{},
"mustaml":"%p#first.nice Text\n%p.nice.middle Text too\n%p\n  %span.inner\n    Weeehah",
"html":"<p id=\"first\" class=\"nice\">Text</p><p class=\"nice middle\">Text too</p><p><span class=\"inner\">Weeehah</span></p>"
},
{
"title":"Implicit Divs",
"desc":"To make things even easier, you can leave out %tag and Mustaml will guess it's a %div",
"testname":"ImplicitDivs",
"data":{},
"mustaml":"#page.container\n  #header\n  #content\n    #sidebar\n  #footer",
"html":"<div id=\"page\" class=\"container\"><div id=\"header\"></div><div id=\"content\"><div id=\"sidebar\"></div></div><div id=\"footer\"></div></div>"
},
{
"title":"HTML-Attributes",
"desc":"Attributes are defined as usual but are appended in brackets. Yes, this is HTML-syntax and not some language-specific map with lots of @, => and so on. ",
"testname":"HAttrs",
"data":{},
"mustaml":"%p(lang=\"en\") Yo!\n%input(type=text value=\"tryna edit me\" disabled)",
"html":"<p lang=\"en\">Yo!</p><input type=\"text\" value=\"tryna edit me\" disabled=\"disabled\"></input>"
},
{
"title":"Old-School HTML-Attributes",
"desc":"You can use some alternate syntax if you like: ",
"testname":"HAttrsAlternates",
"data":{},
"mustaml":"%p(lang=>\"en\") Yo!\n%input(type=>\"text\",value=>\"tryna edit me\", disabled)",
"html":"<p lang=\"en\">Yo!</p><input type=\"text\" value=\"tryna edit me\" disabled=\"disabled\"></input>"
},
{
"title":"HTML-Comments",
"desc":"You can insert html-comments too. ",
"testname":"HComments",
"data":{},
"mustaml":"%html\n  / created by Mustaml!",
"html":"<html><!--  created by Mustaml! --></html>"
},
{
"title":"HTML-Comment-blocks",
"desc":"End even put whole parts of your template into comment tags. This might come in handy if you don't want your users to see this part, but be able to check the rendering output. ",
"testname":"HCommentBlock",
"data":{},
"mustaml":"%html\n  / temporarily disabled:\n    %body %p",
"html":"<html><!--  temporarily disabled:<body&gt;<p&gt;</p&gt;</body&gt; --></html>"
},



{
"title":"Inserting Data",
"desc":"Of course a template engine does output strings. They are escaped for HTML-output by default. ",
"testname":"BasicData",
"data":{"varname":"Hello World!"},
"mustaml":"%p =varname",
"html":"<p>Hello World!</p>"
},

{
"title":"Inserting More Data",
"desc":"The = tag doesn't want sub-nodes, so use parallel =tags like this: ",
"testname":"BasicData2",
"data":{"varname":"Hello World!","varname2":"Hello Venus!"},
"mustaml":"%p\n  =varname\n  , \n  =varname2",
"html":"<p>Hello World!, Hello Venus!</p>"
},


{
"title":"Looping",
"desc":"You can loop over arrays. The current value is available as \".\". ",
"testname":"BasicLoop",
"data":{"planets":["World","Venus","Pluto"]},
"mustaml":"%ul\n  -planets\n    %li \n     Hello \n     =.\n     !",
"html":"<ul><li>Hello World!</li><li>Hello Venus!</li><li>Hello Pluto!</li></ul>"
},

{
"title":"Looping Maps",
"desc":"And you can loop over maps. Inside the loop, you can access the map keys like normal vars. ",
"testname":"BasicAssocLoop",
"data":{"planets":[{"name":"World","greeting":"Hello "},{"name":"Venus","greeting":"Ave "},{"name":"Pluto","greeting":"Hey tiny "}]},
"mustaml":"%ul\n  -planets\n    %li\n      =greeting\n      =name\n      !",
"html":"<ul><li>Hello World!</li><li>Ave Venus!</li><li>Hey tiny Pluto!</li></ul>"
},

{
"title":"Boolean Switches",
"desc":"You can check for true/false values with the very same syntax. ",
"testname":"BasicBoolean",
"data":{"doIt":true},
"mustaml":"-doIt it's true\n-^doIt it's actually false",
"html":"it's true"
},

{
"title":"Boolean Switches (false)",
"desc":"A ^ indicates not, so the children are only shown if the value is false. ",
"testname":"BasicBooleanFalseNot",
"data":{"doIt":false},
"mustaml":"-doIt it's true\n-^doIt it's actually false",
"html":"it's actually false"
},

{
"title":"Boolean Switches (false positive)",
"desc":"Consequently, the text is not rendered, if you get a true value with ^.",
"testname":"BasicBooleanNot",
"data":{"doItNot":true},
"mustaml":"-^doItNot but is was not false",
"html":""
},

{
"title":"Boolean Switches (false positive)",
"desc":"Another use of ^ is checking for unset values. ",
"testname":"BasicBooleanIsset",
"data":{},
"mustaml":"-^undefined Absent!",
"html":"Absent!"
},


{
"title":"Empty Loops",
"desc":"Another use of ^ is checking for empty arrays, strings and 0 numbers. ",
"testname":"EmptryArray",
"data":{"planets":[]},
"mustaml":"%ul\n  -planets\n    %li =. , G'day!\n  -^planets\n    %li.grey No planets to visit today!",
"html":"<ul><li class=\"grey\">No planets to visit today!</li></ul>"
},

{
"title":"Nonempty Loops etc.",
"desc":"The notayim operator (^^) will inverse the not-operator. You can check if a loop would render at least one item. ",
"testname":"EmptryArrayNot",
"data":{"planets":[]},
"mustaml":"-^^ planets %ul\n  -planets\n    %li =. , G'day!\n-^planets\n    %p.grey No planets to visit today!",
"html":"<p class=\"grey\">No planets to visit today!</p>"
},


{
"title":"Escaping",
"desc":"If you want to start a text line with a meta-character otherwise interpreted as some kind of node, you can escape it with a backslash. ",
"testname":"Bscaping",
"data":{},
"mustaml":"\\%p",
"html":"%p"
},

{
"title":"Attributes with data",
"desc":"You can provide a map for highly dynamic attributes, while still providing others directly. Last specified overrides. Note the double space to exit the varname. ",
"testname":"AttrData",
"data":{"linktag":{"rel":"stylesheet","href":"style/main.css"}},
"mustaml":"%link(=linktag  type=\"text\/css\")",
"html":"<link rel=\"stylesheet\" href=\"style/main.css\" type=\"text\/css\"></link>"
},

{
"title":"Attributes with data-values",
"desc":"You can even fill only the attribute's values with dynamic strings, and mix this with other attributes and old syntax. ",
"testname":"AttrDataValues",
"data":{"style":"style/main.css"},
"mustaml":"%link(rel=>stylesheet, href=>=style)",
"html":"<link rel=\"stylesheet\" href=\"style/main.css\"></link>"
},

{
"title":"Mustaml-Comments",
"desc":"Mustaml-Comments are not rendered at all. ",
"testname":"mustamlComments",
"data":{},
"mustaml":"-/ never rendered",
"html":""
},
{
"title":"Mustaml-Comment-blocks",
"desc":"Get rid of whole subtrees with Mustaml-Comments. ",
"testname":"MustamlCommentBlock",
"data":{},
"mustaml":"-/ temporarily disabled:\n    %body %p",
"html":""
}

]}